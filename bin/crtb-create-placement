#!/usr/bin/env raku
use v6.d;
use App::Classroom::Toolbox;
use JSON::Fast;

sub MAIN (IO::Path(Str:D) :c(:$class-file)            where *.f     = %*ENV<CRTB_CLASS_FILE>,                     #= file containing students information; --class-file=classes/demo-class-small or 'export CRTB_CLASS_FILE=classes/demo-class-small'
          IO::Path(Str:D) :r(:$room-file)             where *.f     = %*ENV<CRTB_ROOM_FILE>,                      #= folder to store created groups as files --room-file=rooms/demo-room-1 'export CRTB_ROOM_FILE=rooms/demo-room-1'
          IO::Path(Str:D) :p(:$placements-folder)     where *.d     = %*ENV<CRTB_PLACEMENTS_FOLDER>,              #= folder to store created placements as files; --placements-folder=placements 'export CRTB_PLACEMENTS_FOLDER=placements'
          UInt:D          :m(:$max-display-name-width) where * > 0  = (%*ENV<CRTB_MAX_DISPLAY_NAME_WIDTH> || 15), #= maximum width of displayed names, 'export CRTB_MAX_DISPLAY_NAME_WIDTH=20'
          ) {
    
    my %class = from-json $class-file.extension('json').slurp;
    my @room = from-json $room-file.extension('json').slurp;

    my %result = create-placement(%class, @room);

    my $class = $class-file.basename;
    my $room = $room-file.basename;
    my $date = Date.today;
    
    my $placement-file-name = $placements-folder.add(join '_', $date, $class, $room).extension('json');
    spurt $placement-file-name, to-json %result<placement>;

    my @placement = from-json $placement-file-name.extension('json').slurp;
    say display-placement(@placement, :$max-display-name-width, student-view => True);

    if %result<not-placed-students> {
      my @not-placed;
      for %result<not-placed-students>.values {
        @not-placed.push: %class{$_}<unique-first-name>
      }
      note "\nNoch nicht platziert: " ~ @not-placed.join(", ") ~ "\n" ;

    }
    print "\n";
    say "export CRTB_PLACEMENT_FILE=$placement-file-name"
}